/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mp2_TYPES_H
#define mp2_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace mp2 {

typedef struct _finger_entry__isset {
  _finger_entry__isset() : id(false), port(false) {}
  bool id;
  bool port;
} _finger_entry__isset;

class finger_entry {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  finger_entry() : id(0), port(0) {
  }

  virtual ~finger_entry() throw() {}

  int32_t id;
  int32_t port;

  _finger_entry__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const finger_entry & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const finger_entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const finger_entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
