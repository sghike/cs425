// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Node.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mp2;

class NodeHandler : virtual public NodeIf {
 public:
  NodeHandler() {
    // Your initialization goes here
  }

  void find_successor(finger_entry& _return, const finger_entry& caller) {
    // Your implementation goes here
    printf("find_successor\n");
  }

  void closest_preceding_finger(finger_entry& _return, const int32_t id) {
    // Your implementation goes here
    printf("closest_preceding_finger\n");
  }

  void get_successor(finger_entry& _return) {
    // Your implementation goes here
    printf("get_successor\n");
  }

  void get_predecessor(finger_entry& _return) {
    // Your implementation goes here
    printf("get_predecessor\n");
  }

  void notify(const finger_entry& n) {
    // Your implementation goes here
    printf("notify\n");
  }

  int32_t add_file(const int32_t key_id, const _FILE& s) {
    // Your implementation goes here
    printf("add_file\n");
  }

  int32_t del_file(const int32_t key_id) {
    // Your implementation goes here
    printf("del_file\n");
  }

  void get_file(file_data& _return, const int32_t key_id) {
    // Your implementation goes here
    printf("get_file\n");
  }

  void get_table(node_table& _return, const int32_t id) {
    // Your implementation goes here
    printf("get_table\n");
  }

  bool accept_files(const std::map<int32_t, _FILE> & offload) {
    // Your implementation goes here
    printf("accept_files\n");
  }

  int32_t dummy_add_file(const _FILE& s) {
    // Your implementation goes here
    printf("dummy_add_file\n");
  }

  int32_t dummy_del_file(const std::string& key) {
    // Your implementation goes here
    printf("dummy_del_file\n");
  }

  void dummy_get_file(file_data& _return, const std::string& key) {
    // Your implementation goes here
    printf("dummy_get_file\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<NodeHandler> handler(new NodeHandler());
  shared_ptr<TProcessor> processor(new NodeProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

